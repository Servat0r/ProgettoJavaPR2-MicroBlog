In questo package viene (eventualmente) ospitato il tipo di dato User che implementa un utente
della rete sociale. I metodi dichiarati nell'interfaccia User (o Abstract Class AbstractUser?) sono:

+ User(String username): User (costruttore)
+ hasSentRequest(): bool (indica se l'utente ha fatto o meno una richiesta alla rete)
+ register(SocialNetwork net): void (registra alla rete sociale net)
+ isRegistered(): bool (è registrato o meno a una rete sociale?)
+ unRegister(): void (rimuovi dalla rete sociale a cui è correntemente registrato)
+ writePost(String text, String[] tagStr, Visibility v): void (scrivi un post e aggiungilo alla rete
  sociale a cui sei iscritto con visibilità v
+ removePost(int id): rimuove il post con identificativo id
+ display(int id): stampa il contenuto del post con identificativo id
+ display(String username, int number): stampa tutti gli ultimi number post dell'utente username,
  applicando la regola di visibilità
Tutti questi metodi "decorano" i corrispondenti metodi del TDA SocialNetwork, i.e. ogni metodo ha la
forma:

public <nome_metodo> (<parametro_1>,...,<parametro_n>) {
	//Controllo eventuali eccezioni per parametri non corretti
	//this.hasSentRequest() => true
	<Social_Network>.<nome_metodo> (<parametro_1>,...,<parametro_n>);
	//this.hasSentRequest() => false
}

Soltanto l'utente può chiamare con successo i metodi di SocialNetwork corrispondenti ai suoi,
qualunque altra chiamata di tali metodi deve causare un'eccezione, ed inoltre se nessun metodo
dell'utente è in esecuzione, this.hasSentRequest() == false.